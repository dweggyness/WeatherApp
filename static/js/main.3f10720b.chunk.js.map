{"version":3,"sources":["components/DailyWeatherCell.js","components/MainBody.js","components/Footer.js","components/HourlyWeatherCell.js","components/HourlyTempCell.js","components/DayTimeline.js","components/WeatherView.js","components/Data/WeatherData.js","components/Data/GeoLocation.js","index.js"],"names":["fadeIn","keyframes","_templateObject","Cell","styled","li","_templateObject2","Day","span","_templateObject3","Icon","i","_templateObject4","DailyWeatherCell","react_default","a","createElement","this","props","day","className","icon","Math","round","temperature","React","Component","Container","ul","MainBody_templateObject","MainBody","daily","cells","push","components_DailyWeatherCell","key","days","renderCells","div","Footer_templateObject","Button","Footer_templateObject2","Footer","Footer_Container","href","index_esm","Card","HourlyWeatherCell_templateObject","width","HourlyWeatherCell","count","_getWidth","content","Tick","HourlyTempCell_templateObject","HourlyTempCell_templateObject2","HourlyTempCell","HourlyTempCell_Cell","Wrapper","DayTimeline_templateObject","HorFlex","DayTimeline_templateObject2","DayTimeline","temp","hourly","length","_getContent","components_HourlyWeatherCell","curHour","temps","time","components_HourlyTempCell","Date","date","getHours","renderTemp","GlobalStyle","createGlobalStyle","WeatherView_templateObject","MainContainer","WeatherView_templateObject2","InnerContainer","WeatherView_templateObject3","Text","WeatherView_templateObject4","_templateObject5","WeatherView","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","weekdays","dayArray","_getDays","getDay","changeBackground","sunTime","WeatherView_Icon","style","fontSize","summary","components_DayTimeline","components_MainBody","components_Footer","WeatherData","state","_this2","location","latitude","longitude","fetch","then","results","json","data","map","temperatureHigh","temperatureLow","_getIcon","hour","currently","setState","sunriseTime","sunsetTime","components_WeatherView","Geolocation","isGeolocationAvailable","isGeolocationEnabled","coords","Data_WeatherData","geolocated","userDecisionTimeout","ReactDOM","render","GeoLocation","document","getElementById"],"mappings":"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","file":"static/js/main.3f10720b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, { keyframes } from 'styled-components'\r\nimport '../styles/weather-icons.min.css'\r\n\r\nconst fadeIn = keyframes`\r\n    0% { \r\n        opacity: 0;\r\n        transform: translateY(250px);\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform: translateY(0px);\r\n    }\r\n`\r\nconst Cell = styled.li`\r\n    display: flex;\r\n    animation: ${fadeIn} 1.75s ease-out;\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 5px auto;\r\n    height: 40px;\r\n    width: 90%;\r\n    background-color: rgba(230,230,230, 0.4);\r\n    border-radius: 7px;\r\n    align-items: center;\r\n    font-size: 1.25em;\r\n    font-family: \"Open Sans\";\r\n`\r\n\r\nconst Day = styled.span`\r\n    margin-left: 3%;\r\n    width: 42%;\r\n`\r\n\r\nconst Icon = styled.i`\r\n    font-size: 1.5em;\r\n    width: 41%;\r\n    align-items: center;\r\n    justify-contents: center;\r\n`\r\n\r\nclass DailyWeatherCell extends React.Component {\r\n    render(){\r\n        return (\r\n            <Cell>\r\n                <Day>{this.props.day}</Day>\r\n                <Icon className={this.props.icon}></Icon>\r\n                <span>{Math.round(this.props.temperature)}Â°C</span>\r\n            </Cell>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DailyWeatherCell","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport '../styles/weather-icons.min.css'\r\nimport DailyWeatherCell from './DailyWeatherCell'\r\n\r\n// The main body of the view -- animated\r\n/* this.props {\r\n    daily= {temperature: xxx, icon: xxx}\r\n    day= [Monday,Tuesday,...]\r\n}\r\n*/\r\n\r\nconst Container = styled.ul`\r\n    background-color: rgba(255,255,255, 0);\r\n    height: 450px;\r\n    text-align: left;\r\n    padding: 0;\r\n`\r\n\r\nclass MainBody extends React.Component {\r\n    renderCells(){ // skip first index as it is already rendered\r\n        if(this.props.daily[0].icon === \"\"){ // check if there is response from API yet\r\n            return (\r\n                <div>Loading</div>\r\n            )\r\n        } \r\n\r\n        let cells = [];\r\n        for(let i=1; i<8; i++){ // next 7days\r\n            cells.push(\r\n                <DailyWeatherCell key={i}\r\n                    day= {this.props.days[i]}\r\n                    temperature= {this.props.daily[i].temperature}\r\n                    icon= {this.props.daily[i].icon}\r\n                />\r\n            )\r\n        }\r\n        return cells\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                {this.renderCells()}\r\n            </Container>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MainBody\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport {GoMarkGithub} from 'react-icons/go'\r\n\r\n// Footer\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    margin-bottom: 35px;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n`\r\n\r\nconst Button = styled.a`\r\n    color: black;\r\n    text-decoration: none;\r\n    transition: 0.3s;\r\n    border-radius: 7px;\r\n    align-items: center;\r\n    &:hover {\r\n        cursor: pointer;\r\n        transform: scale(1.1);\r\n        background: rgba(255,255,255, 0.1);\r\n    }\r\n`\r\n\r\nclass Footer extends React.Component {\r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Button href=\"https://darksky.net/poweredby/\">Powered by DarkSky</Button>\r\n                <span>\r\n                    <Button href=\"https://github.com/dweggyness/WeatherApp\">\r\n                        <GoMarkGithub/> Github\r\n                    </Button>\r\n                </span>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Card = styled.div`\r\n    display: flex;\r\n    flex: 0 0 auto;\r\n    height: 40px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 0.75em;\r\n    font-family: \"Lato\";\r\n\r\n    width: ${props => {\r\n        return (props.width + 'px');\r\n    }};\r\n    background: ${props => {\r\n        const icon = props.icon;\r\n        switch(icon){\r\n            case \"Clear\":\r\n                return 'rgba(148, 189, 255, 0.8)';\r\n            case \"Rain\":\r\n                return 'rgba(115, 115, 115, 0.8)';\r\n            case \"Snow\":\r\n                return 'rgba(115, 115, 115, 0.8)';\r\n            case \"Cloudy\":\r\n                return 'rgba(160, 160, 160, 0.8)';\r\n            default:\r\n                return 'rgba(230, 230, 230, 0.8)';\r\n        }\r\n    }};\r\n`\r\n\r\nclass HourlyWeatherCell extends React.Component {\r\n    _getWidth(count){\r\n        return (Math.round(count * 24))\r\n    }\r\n\r\n    render(){\r\n        const width = this._getWidth(this.props.count);\r\n        let content = \"\";\r\n        if(this.props.count >= 3){\r\n            content = this.props.icon;\r\n        }\r\n        return (\r\n            <Card \r\n                width={width}\r\n                icon={this.props.icon}\r\n            >{content}\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HourlyWeatherCell","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Tick = styled.div`\r\n    height: 5px;\r\n    width: 23px;\r\n    border-left: 1px solid rgb(45,45,45);\r\n`\r\nconst Cell = styled.span`\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-size: 0.6em;\r\n`\r\n\r\nclass HourlyTempCell extends React.Component {\r\n    render(){\r\n        return (\r\n            <Cell>\r\n                <Tick />\r\n                <span>{this.props.content}</span>\r\n                <span>{this.props.temperature}</span>\r\n            </Cell>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HourlyTempCell","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport HourlyWeatherCell from './HourlyWeatherCell'\r\nimport HourlyTempCell from './HourlyTempCell'\r\n\r\n/*\r\n    this.props.hourly = {\r\n        temperature: xxx,\r\n        icon: xxx, (darkSky format)\r\n    }\r\n*/\r\nconst Wrapper = styled.div`\r\n    margin: 0 12px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    &:scrolling-wrapper {\r\n        -webkit-overflow-scrolling: touch;\r\n      }\r\n`\r\n\r\nconst HorFlex = styled.div`\r\n    display: flex;\r\n`\r\n\r\nclass DayTimeline extends React.Component {\r\n    _getContent(icon){\r\n        switch(icon){\r\n            case \"clear-day\":\r\n                return 'Clear';\r\n            case \"rain\":\r\n                return 'Rain';\r\n            case \"snow\":\r\n                return 'Snow';\r\n            case \"partly-cloudy-day\":\r\n                return 'Cloudy';\r\n            case \"partly-cloudy-night\":\r\n                return 'Cloudy';\r\n            default:\r\n                return 'Overcast';\r\n        }\r\n    };\r\n\r\n    renderCells(){\r\n        let cells = []; // function to form an array of cells where consecutive ones are merged\r\n        let temp = [];\r\n        let count = 0;\r\n        for(let i=0; i<=(this.props.hourly.length / 2); i++){\r\n            let icon = this._getContent(this.props.hourly[i].icon)\r\n            temp.push(icon); // add in the current forecast into temp\r\n            count++;\r\n\r\n            if(i === 0){ // first item\r\n                continue;\r\n            }\r\n\r\n            if(icon !== temp[i - 1]) { // different hourly forecast, push old one in and reset counter\r\n                cells.push(\r\n                    <HourlyWeatherCell key={i}\r\n                        icon= {temp[i - 1]}\r\n                        count= {count - 1}\r\n                    />\r\n                );\r\n                count = 1;\r\n            }\r\n\r\n            if(i === 24 && count > 0){ // last item but still haven't pushed in\r\n                cells.push(\r\n                    <HourlyWeatherCell key={i}\r\n                        icon= {icon}\r\n                        count= {count}\r\n                    />\r\n                );\r\n            }\r\n        }\r\n        return cells\r\n    }\r\n\r\n    renderTemp(curHour){\r\n        let temps = [];\r\n        for(let i=0; i<((this.props.hourly.length / 2)); i++){\r\n            let temp = Math.round(this.props.hourly[i].temperature) + 'Â°C'\r\n            let time = \"\"\r\n            if(curHour > 24){\r\n                curHour -= 24;\r\n            }\r\n            if(curHour > 12){\r\n                time = (curHour - 12) + 'pm'\r\n            } else {\r\n                time = curHour + 'am'\r\n            }\r\n            curHour++;\r\n\r\n            if(i === 0){ // first time tick is 'Now'\r\n                temps.push(\r\n                    <HourlyTempCell key={i}\r\n                        content= \"Now\"\r\n                        temperature= {temp}\r\n                    />\r\n                )\r\n                continue;\r\n            }\r\n\r\n            if(i % 2 === 0){ // even time tick, show temp & time\r\n                temps.push(\r\n                    <HourlyTempCell key={i}\r\n                        content= {time}\r\n                        temperature= {temp}\r\n                    />\r\n                )\r\n            } else {\r\n                temps.push(\r\n                    <HourlyTempCell key={i} \r\n                        content= \"\"\r\n                        temperature= \"\"\r\n                    />\r\n                )\r\n            };\r\n        }\r\n        return temps\r\n    }\r\n\r\n\r\n    render(){\r\n        const curHour = (new Date(this.props.date * 1000)).getHours()\r\n        return (\r\n            <Wrapper>\r\n                <HorFlex>{this.renderCells()}</HorFlex>\r\n                <HorFlex>{this.renderTemp(curHour)}</HorFlex>\r\n            </Wrapper>\r\n        )\r\n    }\r\n};\r\n\r\nexport default DayTimeline","import React from 'react';\r\nimport styled, {createGlobalStyle} from 'styled-components'\r\nimport MainBody from './MainBody'\r\nimport Footer from './Footer'\r\nimport DayTimeline from './DayTimeline'\r\n\r\n// Draws out the weather data on the view\r\n/* this.props.daily = [{\r\n    temperature:\r\n    icon:\r\n    },{},...]\r\n\r\n    hourly={this.state.hourly}\r\n    summary={this.state.summary}\r\n    date={this.state.date}\r\n    sunTime={this.state.sunTime}\r\n*/\r\n\r\nconst GlobalStyle = createGlobalStyle` \r\n    html, body {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    color: rgb(35,35,35);\r\n    overflow-x: hidden;\r\n    font-family: \"Lato\";\r\n    background: ${props => props.day \r\n        ? \"rgb(0,180,200)\"\r\n        : \"rgb(25,34,93);\"};\r\n    background: ${props => props.day\r\n        ? \"linear-gradient(0deg, rgba(0,180,200,1) 0%, rgba(0,110,200,1) 100%)\"\r\n        : \"linear-gradient(0deg, rgba(25,34,93,1) 0%, rgba(0,27,51,1) 100%);\"};\r\n}\r\n`\r\n\r\nconst MainContainer = styled.div`\r\n    background-color: rgba(230,230,230, 0.4);\r\n    width: 95%;\r\n    max-width: 600px;\r\n    margin: 2% auto;\r\n    text-align: center;\r\n    border-radius: 35px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst InnerContainer = styled.div`\r\n    display: flex;\r\n    text-align: center;\r\n    margin: 4% 0;\r\n    flex-direction: column\r\n    font-size: 3em;\r\n`\r\n\r\nconst Text = styled.span`\r\n    font-size: 0.5em;\r\n    margin: 0% 5% 1.5% 5%;\r\n`\r\n\r\nconst Icon = styled.span`\r\n    font-size: 1.5em;\r\n`\r\n\r\nclass WeatherView extends React.Component {\r\n    constructor(){\r\n        super()\r\n        this.weekdays = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n    }\r\n    _getDays(day){ // returns a sequenced array of weekdays for the next week\r\n        let dayArray = []; // eg if today is Tuesday, then dayArray = [Tuesday,Wednesday,...,Tuesday]\r\n        for(let i=0;i<8;i++){\r\n            if (day === 7){\r\n                day = 0;\r\n            }\r\n            dayArray.push(this.weekdays[day])\r\n            day += 1;\r\n        }\r\n        return dayArray;\r\n    }\r\n    render() {\r\n        const days = this._getDays((new Date(this.props.date * 1000)).getDay())\r\n        const changeBackground = (this.props.sunTime[1] > this.props.date && this.props.date > this.props.sunTime[0])\r\n                                ? true // check if current time is before sunset and after sunrise time\r\n                                : false; // if its TRUE, then don't change background\r\n\r\n        return (\r\n            <MainContainer>\r\n                <GlobalStyle day={changeBackground} />\r\n                <InnerContainer>\r\n                    <Text> {days[0]} </Text>\r\n                    <Icon className={this.props.daily[0].icon}></Icon>\r\n                    {Math.round(this.props.daily[0].temperature)}Â°C\r\n                    <Text style={{fontSize: \"0.4em\"}}>{this.props.summary}</Text>\r\n                </InnerContainer>\r\n                <DayTimeline\r\n                    hourly={this.props.hourly}\r\n                    date={this.props.date}\r\n                />\r\n                <MainBody\r\n                    daily={this.props.daily} \r\n                    days={days}\r\n                />\r\n                <Footer />\r\n            </MainContainer>\r\n        )\r\n    }\r\n};\r\n\r\nexport default WeatherView\r\n","import React from 'react';\r\nimport WeatherView from '../WeatherView'\r\n\r\n// Component to find out weather data about location that was passed to it\r\n\r\n// props.latitude && props.longitude //\r\n\r\nclass WeatherData extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            summary: \"\",\r\n            daily: [{\r\n                temperature: 0,\r\n                icon: \"\",\r\n            }],\r\n            hourly: [{\r\n                temperature: 0,\r\n                icon: \"\",\r\n            }],\r\n            date: \"0\",\r\n            sunTime: [0,0]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let location = \"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/48d4a66fa6056feaac3a6a1775d401e4/\"\r\n        location += this.props.latitude + \",\" + this.props.longitude + \"?units=si\"\r\n\r\n        fetch(location) // get weather data from DarkSky\r\n        .then(results => {\r\n            return results.json()\r\n        }).then(data => {\r\n            let daily = data.daily.data.map((day) => { // create an object array of weather data for next week incl today\r\n                return {\r\n                    temperature: (day.temperatureHigh + day.temperatureLow) / 2,\r\n                    icon: this._getIcon(day.icon)\r\n                }\r\n            });\r\n            let hourly = data.hourly.data.map((hour) => {\r\n                return {\r\n                    temperature: hour.temperature,\r\n                    icon: hour.icon\r\n                }\r\n            });\r\n\r\n            daily[0].temperature = data.currently.temperature; // update today's temp with a more accurate one\r\n            daily[0].icon = this._getIcon(data.currently.icon);\r\n\r\n            this.setState({\r\n                daily: daily, \r\n                hourly: hourly,\r\n                summary: data.hourly.summary, \r\n                date: data.currently.time,\r\n                sunTime: [data.daily.data[0].sunriseTime,data.daily.data[0].sunsetTime]\r\n            })\r\n        })\r\n    }\r\n    \r\n    _getIcon(icon){ // converts API icon data into our CSS icon\r\n        switch(icon){\r\n            case \"clear-day\":\r\n                return \"wi wi-day-sunny\";\r\n            case \"rain\":\r\n                return \"wi wi-rain\";\r\n            case \"snow\":\r\n                return \"wi wi-snow\";\r\n            case \"partly-cloudy-day\":\r\n                return \"wi wi-day-sunny-overcast\";\r\n            case \"partly-cloudy-night\":\r\n                return \"wi wi-night-partly-cloudy\";\r\n            default:\r\n                return \"wi wi-cloud\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <WeatherView \r\n                daily={this.state.daily}\r\n                hourly={this.state.hourly}\r\n                summary={this.state.summary}\r\n                date={this.state.date}\r\n                sunTime={this.state.sunTime}\r\n            />\r\n        )\r\n    }\r\n};\r\n\r\nexport default WeatherData\r\n","import React from 'react';\r\nimport { geolocated } from \"react-geolocated\";\r\nimport WeatherData from \"./WeatherData\";\r\n \r\n// Gets location of user and passes the longitude and latidude to the Weather query\r\n\r\nclass Geolocation extends React.Component {  \r\n  render() {\r\n    return !this.props.isGeolocationAvailable\r\n      ? <div>Your browser does not support Geolocation</div>\r\n      : !this.props.isGeolocationEnabled\r\n        ? <div>Geolocation is not enabled</div>\r\n        : this.props.coords\r\n          ? \r\n          <WeatherData\r\n            latitude={this.props.coords.latitude}\r\n            longitude={this.props.coords.longitude}\r\n            // latitude='40.7128'\r\n            // longitude='74.0060'\r\n          />\r\n          : <div>Getting the location data&hellip; </div>;\r\n  }\r\n}\r\n \r\nexport default geolocated({\r\n  userDecisionTimeout: 5000,\r\n})(Geolocation);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GeoLocation from './components/Data/GeoLocation' ;\nimport './styles/index.css';\n\nReactDOM.render(<GeoLocation />, document.getElementById('root'));\n"],"sourceRoot":""}